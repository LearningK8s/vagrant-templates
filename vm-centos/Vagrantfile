# -*- mode: ruby -*-
#
# Vagrantfile - One development machine to rule them all.
#


require 'json'


# Provisioning might need updating for different CentOS
# releases, see the "provision.sh" script for details...
centos_release = 7


# This is the minimum customization necessary but, to tailor this configuration
# to a specific project, you should also edit the "vagrant/provision.sh" script...
vm_name = "Generic CentOS #{centos_release}.x"
vm_hostname = "vagrant-centos-#{centos_release}x"
vm_size = {"cpus" => 1, "memory" => 1024}


# Location of the external files used by this script...
vagrant_assets = File.dirname(__FILE__) + "/vagrant"


# Someone may need to (locally) override the VM size for some specific task...
vm_size_override = File.dirname(__FILE__) + "/.vagrant_size.json"
if File.exists?(vm_size_override)
    vm_size = JSON.parse(File.read(vm_size_override))
end


# This workaround is needed during the brief period when a new CentOS point
# release becomes available but the CentOS base box hasn't been updated yet.
# It's also required if we choose to stick with some specific point release.
begin
    class FixGuestAdditions < VagrantVbguest::Installers::RedHat
        def dependencies
            packages = super

            # If there's no "kernel-devel" package matching the running kernel in the
            # default repositories, then the base box we're using doesn't match the
            # latest CentOS release anymore and we have to look for it in the archives...
            if communicate.test('test -f /etc/centos-release && ! yum -q info kernel-devel-`uname -r` &>/dev/null')
                env.ui.warn("[#{vm.name}] Looking for the CentOS 'kernel-devel' package in the release archives...")
                packages.sub!('kernel-devel-`uname -r`', 'http://mirror.centos.org/centos' \
                                                         '/`grep -Po \'\b\d+\.[\d.]+\b\' /etc/centos-release`' \
                                                         '/{os,updates}/`arch`/Packages/kernel-devel-`uname -r`.rpm')
            end

            packages
        end
    end

    # Anything with priority over 5 overrides the default installer...
    VagrantVbguest::Installer.register(FixGuestAdditions, 100)
rescue NameError
    # The "VagrantVbguest" class won't be available during the first pass,
    # when vagrant is checking for required plugins and stuff like that...
end


Vagrant.configure(2) do |config|
    config.vagrant.plugins = ["vagrant-vbguest"]

    config.vm.box = "centos/#{centos_release}"
    config.vm.hostname = vm_hostname

    # The CentOS box defaults to using rsynced folders...
    config.vm.synced_folder ".", "/vagrant", disabled: true

    # Support git operations inside the VM. The file provisioner requires files to exist,
    # which in this case is a good thing as it prevents commits attributed to wrong users...
    config.vm.provision "file", source: "~/.gitconfig", destination: "~/.gitconfig"

    # Make the local user's SSH key reachable by the main provisioning script...
    config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "/tmp/id_rsa.pub"

    # Perform base-system customizations and install project-specific dependencies...
    config.vm.provision "shell", path: "#{vagrant_assets}/provision.sh",
                                 privileged: false  # ...run as the "vagrant" user.

    config.ssh.forward_agent = true
    config.ssh.keep_alive = true


    config.vm.provider "virtualbox" do |vm, override|
        vm.name = vm_name
        vm.gui = false

        vm.memory = vm_size["memory"]
        vm.cpus = vm_size["cpus"]

        # Resolve names using the host's stub resolver (useful for VPNs)...
        vm.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]

        # Install guest additions automatically...
        override.vbguest.auto_update = true

        # Expose the VM to the host instead of forwarding many ports individually
        # for complex projects. The provisioning script will setup Avahi/mDNS to
        # make the guest VM easily accessible through a "*.local" domain...
        override.vm.network "private_network", type: "dhcp"

        # Make the current directory visible (and editable) inside the VM...
        override.vm.synced_folder ".", "/home/vagrant/shared"
    end
end


# vim: set expandtab ts=4 sw=4 ft=ruby:
